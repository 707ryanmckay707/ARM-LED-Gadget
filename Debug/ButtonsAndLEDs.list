
ButtonsAndLEDs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001050  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001110  08001110  00011110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001140  08001140  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001140  08001140  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001140  08001140  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001140  08001140  00011140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001144  08001144  00011144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001154  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001154  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000208a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ba4  00000000  00000000  000220be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f8  00000000  00000000  00022c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000280  00000000  00000000  00022f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de81  00000000  00000000  000231e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003c68  00000000  00000000  00031061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054530  00000000  00000000  00034cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000891f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008ec  00000000  00000000  0008924c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080010f8 	.word	0x080010f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080010f8 	.word	0x080010f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 f9b3 	bl	8000590 <HAL_Init>


  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f901 	bl	8000430 <SystemClock_Config>


  //Port C is used for the LEDs

  //Enable GPIO for Port C (For the output pin(s))
  RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 800022e:	4b6a      	ldr	r3, [pc, #424]	; (80003d8 <main+0x1b8>)
 8000230:	695a      	ldr	r2, [r3, #20]
 8000232:	4b69      	ldr	r3, [pc, #420]	; (80003d8 <main+0x1b8>)
 8000234:	2180      	movs	r1, #128	; 0x80
 8000236:	0309      	lsls	r1, r1, #12
 8000238:	430a      	orrs	r2, r1
 800023a:	615a      	str	r2, [r3, #20]

  for(int i = 0; i < 4; ++i)
 800023c:	2300      	movs	r3, #0
 800023e:	617b      	str	r3, [r7, #20]
 8000240:	e039      	b.n	80002b6 <main+0x96>
  {
	  GPIOC->MODER |= (0x1UL << (12 + i * 2));		//GPIO_MODER_MODERx_0 set the 1 in 01
 8000242:	4b66      	ldr	r3, [pc, #408]	; (80003dc <main+0x1bc>)
 8000244:	6819      	ldr	r1, [r3, #0]
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	3306      	adds	r3, #6
 800024a:	005b      	lsls	r3, r3, #1
 800024c:	2201      	movs	r2, #1
 800024e:	409a      	lsls	r2, r3
 8000250:	4b62      	ldr	r3, [pc, #392]	; (80003dc <main+0x1bc>)
 8000252:	430a      	orrs	r2, r1
 8000254:	601a      	str	r2, [r3, #0]
	  GPIOC->MODER &= ~(0x2UL << (12 + i * 2)); 	//~(GPIO_MODER_MODERx_1) set the 0 in 01
 8000256:	4b61      	ldr	r3, [pc, #388]	; (80003dc <main+0x1bc>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	3306      	adds	r3, #6
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	2102      	movs	r1, #2
 8000262:	4099      	lsls	r1, r3
 8000264:	000b      	movs	r3, r1
 8000266:	43d9      	mvns	r1, r3
 8000268:	4b5c      	ldr	r3, [pc, #368]	; (80003dc <main+0x1bc>)
 800026a:	400a      	ands	r2, r1
 800026c:	601a      	str	r2, [r3, #0]

	  GPIOC->OTYPER &= ~(0x40 << i);				//~(GPIO_OTYPER_OT_x)
 800026e:	4b5b      	ldr	r3, [pc, #364]	; (80003dc <main+0x1bc>)
 8000270:	685a      	ldr	r2, [r3, #4]
 8000272:	2140      	movs	r1, #64	; 0x40
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	4099      	lsls	r1, r3
 8000278:	000b      	movs	r3, r1
 800027a:	43db      	mvns	r3, r3
 800027c:	0019      	movs	r1, r3
 800027e:	4b57      	ldr	r3, [pc, #348]	; (80003dc <main+0x1bc>)
 8000280:	400a      	ands	r2, r1
 8000282:	605a      	str	r2, [r3, #4]

	  GPIOC->OSPEEDR |= (0x3UL << (12 + i * 2));	//GPIO_OSPEEDER_OSPEEDRx
 8000284:	4b55      	ldr	r3, [pc, #340]	; (80003dc <main+0x1bc>)
 8000286:	6899      	ldr	r1, [r3, #8]
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	3306      	adds	r3, #6
 800028c:	005b      	lsls	r3, r3, #1
 800028e:	2203      	movs	r2, #3
 8000290:	409a      	lsls	r2, r3
 8000292:	4b52      	ldr	r3, [pc, #328]	; (80003dc <main+0x1bc>)
 8000294:	430a      	orrs	r2, r1
 8000296:	609a      	str	r2, [r3, #8]

	  GPIOC->PUPDR  &= ~(0x3UL << (12 + i * 2));	//~(GPIO_PUPDR_PUPDRx)
 8000298:	4b50      	ldr	r3, [pc, #320]	; (80003dc <main+0x1bc>)
 800029a:	68da      	ldr	r2, [r3, #12]
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	3306      	adds	r3, #6
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	2103      	movs	r1, #3
 80002a4:	4099      	lsls	r1, r3
 80002a6:	000b      	movs	r3, r1
 80002a8:	43d9      	mvns	r1, r3
 80002aa:	4b4c      	ldr	r3, [pc, #304]	; (80003dc <main+0x1bc>)
 80002ac:	400a      	ands	r2, r1
 80002ae:	60da      	str	r2, [r3, #12]
  for(int i = 0; i < 4; ++i)
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	3301      	adds	r3, #1
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	2b03      	cmp	r3, #3
 80002ba:	ddc2      	ble.n	8000242 <main+0x22>


  //Port B is used for the buttons

  //Enable GPIO for Port B (For the input pin)
  RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80002bc:	4b46      	ldr	r3, [pc, #280]	; (80003d8 <main+0x1b8>)
 80002be:	695a      	ldr	r2, [r3, #20]
 80002c0:	4b45      	ldr	r3, [pc, #276]	; (80003d8 <main+0x1b8>)
 80002c2:	2180      	movs	r1, #128	; 0x80
 80002c4:	02c9      	lsls	r1, r1, #11
 80002c6:	430a      	orrs	r2, r1
 80002c8:	615a      	str	r2, [r3, #20]

  //The button connected to Port B Pin 0 is used to change the number of LEDs that light up in the chain.
  //Setup Port B Pin 0 for Input
  GPIOB->MODER &= ~(GPIO_MODER_MODER0_Msk);
 80002ca:	4b45      	ldr	r3, [pc, #276]	; (80003e0 <main+0x1c0>)
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	4b44      	ldr	r3, [pc, #272]	; (80003e0 <main+0x1c0>)
 80002d0:	2103      	movs	r1, #3
 80002d2:	438a      	bics	r2, r1
 80002d4:	601a      	str	r2, [r3, #0]
  GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR0);
 80002d6:	4b42      	ldr	r3, [pc, #264]	; (80003e0 <main+0x1c0>)
 80002d8:	68da      	ldr	r2, [r3, #12]
 80002da:	4b41      	ldr	r3, [pc, #260]	; (80003e0 <main+0x1c0>)
 80002dc:	2103      	movs	r1, #3
 80002de:	438a      	bics	r2, r1
 80002e0:	60da      	str	r2, [r3, #12]

  //The button connected to Port B Pin 1 is used to light up the LED chain.
  //Setup Port B Pin 1 for Input
  GPIOB->MODER &= ~(GPIO_MODER_MODER1_Msk);
 80002e2:	4b3f      	ldr	r3, [pc, #252]	; (80003e0 <main+0x1c0>)
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	4b3e      	ldr	r3, [pc, #248]	; (80003e0 <main+0x1c0>)
 80002e8:	210c      	movs	r1, #12
 80002ea:	438a      	bics	r2, r1
 80002ec:	601a      	str	r2, [r3, #0]
  GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR1);
 80002ee:	4b3c      	ldr	r3, [pc, #240]	; (80003e0 <main+0x1c0>)
 80002f0:	68da      	ldr	r2, [r3, #12]
 80002f2:	4b3b      	ldr	r3, [pc, #236]	; (80003e0 <main+0x1c0>)
 80002f4:	210c      	movs	r1, #12
 80002f6:	438a      	bics	r2, r1
 80002f8:	60da      	str	r2, [r3, #12]




  int numOfLEDsToLight = NUM_OF_LEDS;
 80002fa:	2304      	movs	r3, #4
 80002fc:	613b      	str	r3, [r7, #16]
  int pBp1ButtonCurrentlyPressed = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	60fb      	str	r3, [r7, #12]

  int setIdx = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	60bb      	str	r3, [r7, #8]
  int resetIdx = NUM_OF_LEDS - 1;
 8000306:	2304      	movs	r3, #4
 8000308:	3b01      	subs	r3, #1
 800030a:	607b      	str	r3, [r7, #4]


  while (1)
  {
	  if((GPIOB->IDR & GPIO_IDR_0) && !pBp1ButtonCurrentlyPressed)
 800030c:	4b34      	ldr	r3, [pc, #208]	; (80003e0 <main+0x1c0>)
 800030e:	691b      	ldr	r3, [r3, #16]
 8000310:	2201      	movs	r2, #1
 8000312:	4013      	ands	r3, r2
 8000314:	d013      	beq.n	800033e <main+0x11e>
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d110      	bne.n	800033e <main+0x11e>
	  {
		  --numOfLEDsToLight;
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	3b01      	subs	r3, #1
 8000320:	613b      	str	r3, [r7, #16]
		  if(numOfLEDsToLight == 0)
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d101      	bne.n	800032c <main+0x10c>
			  numOfLEDsToLight = NUM_OF_LEDS;
 8000328:	2304      	movs	r3, #4
 800032a:	613b      	str	r3, [r7, #16]
		  resetLEDs(numOfLEDsToLight, &setIdx, &resetIdx);
 800032c:	1d3a      	adds	r2, r7, #4
 800032e:	2308      	movs	r3, #8
 8000330:	18f9      	adds	r1, r7, r3
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	0018      	movs	r0, r3
 8000336:	f000 f855 	bl	80003e4 <resetLEDs>

		  pBp1ButtonCurrentlyPressed = 1;
 800033a:	2301      	movs	r3, #1
 800033c:	60fb      	str	r3, [r7, #12]
	  }

	  //if the button isn't currently pressed but it previously was
	  if((~(GPIOB->IDR) & GPIO_IDR_0) && pBp1ButtonCurrentlyPressed)
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <main+0x1c0>)
 8000340:	691b      	ldr	r3, [r3, #16]
 8000342:	2201      	movs	r2, #1
 8000344:	4013      	ands	r3, r2
 8000346:	d101      	bne.n	800034c <main+0x12c>
 8000348:	2301      	movs	r3, #1
 800034a:	e000      	b.n	800034e <main+0x12e>
 800034c:	2300      	movs	r3, #0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d004      	beq.n	800035c <main+0x13c>
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <main+0x13c>
	  {
		  pBp1ButtonCurrentlyPressed = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
	  }

	  if(GPIOB->IDR & GPIO_IDR_1)
 800035c:	4b20      	ldr	r3, [pc, #128]	; (80003e0 <main+0x1c0>)
 800035e:	691b      	ldr	r3, [r3, #16]
 8000360:	2202      	movs	r2, #2
 8000362:	4013      	ands	r3, r2
 8000364:	d030      	beq.n	80003c8 <main+0x1a8>
	  {
		  if(numOfLEDsToLight == 1)
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d106      	bne.n	800037a <main+0x15a>
		  {
			  GPIOC->BSRR |= GPIO_BSRR_BS_6;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <main+0x1bc>)
 800036e:	699a      	ldr	r2, [r3, #24]
 8000370:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <main+0x1bc>)
 8000372:	2140      	movs	r1, #64	; 0x40
 8000374:	430a      	orrs	r2, r1
 8000376:	619a      	str	r2, [r3, #24]
 8000378:	e7c8      	b.n	800030c <main+0xec>
		  }
		  else
		  {
			  GPIOC->BSRR |= (0x40U << setIdx);		//GPIO_BSRR_BS_setIdx
 800037a:	4b18      	ldr	r3, [pc, #96]	; (80003dc <main+0x1bc>)
 800037c:	6999      	ldr	r1, [r3, #24]
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	2240      	movs	r2, #64	; 0x40
 8000382:	409a      	lsls	r2, r3
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <main+0x1bc>)
 8000386:	430a      	orrs	r2, r1
 8000388:	619a      	str	r2, [r3, #24]
			  GPIOC->BRR |= (0x40U << resetIdx);	//GPIO_BRR_BR_resetIdx;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <main+0x1bc>)
 800038c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2240      	movs	r2, #64	; 0x40
 8000392:	409a      	lsls	r2, r3
 8000394:	4b11      	ldr	r3, [pc, #68]	; (80003dc <main+0x1bc>)
 8000396:	430a      	orrs	r2, r1
 8000398:	629a      	str	r2, [r3, #40]	; 0x28

			  ++setIdx;
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	3301      	adds	r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
			  if(setIdx >= numOfLEDsToLight)
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	693a      	ldr	r2, [r7, #16]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	dc01      	bgt.n	80003ac <main+0x18c>
				  setIdx = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60bb      	str	r3, [r7, #8]
			  ++resetIdx;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3301      	adds	r3, #1
 80003b0:	607b      	str	r3, [r7, #4]
			  if(resetIdx >= numOfLEDsToLight)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	693a      	ldr	r2, [r7, #16]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	dc01      	bgt.n	80003be <main+0x19e>
				  resetIdx = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	607b      	str	r3, [r7, #4]

			  HAL_Delay(DELAY_TIME);
 80003be:	2364      	movs	r3, #100	; 0x64
 80003c0:	0018      	movs	r0, r3
 80003c2:	f000 f949 	bl	8000658 <HAL_Delay>
 80003c6:	e7a1      	b.n	800030c <main+0xec>
		  }
	  }
	  else
	  {
		  resetLEDs(numOfLEDsToLight, &setIdx, &resetIdx);
 80003c8:	1d3a      	adds	r2, r7, #4
 80003ca:	2308      	movs	r3, #8
 80003cc:	18f9      	adds	r1, r7, r3
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 f807 	bl	80003e4 <resetLEDs>
	  if((GPIOB->IDR & GPIO_IDR_0) && !pBp1ButtonCurrentlyPressed)
 80003d6:	e799      	b.n	800030c <main+0xec>
 80003d8:	40021000 	.word	0x40021000
 80003dc:	48000800 	.word	0x48000800
 80003e0:	48000400 	.word	0x48000400

080003e4 <resetLEDs>:
	  }
  }
}

void resetLEDs(const int numOfLEDsToLight, int* setIdx, int* resetIdx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
	for(int pinOffest = 0; pinOffest < NUM_OF_LEDS; ++pinOffest)
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
 80003f4:	e00a      	b.n	800040c <resetLEDs+0x28>
	  GPIOC->BRR |= (0x40U << pinOffest);
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <resetLEDs+0x48>)
 80003f8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80003fa:	2240      	movs	r2, #64	; 0x40
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	409a      	lsls	r2, r3
 8000400:	4b0a      	ldr	r3, [pc, #40]	; (800042c <resetLEDs+0x48>)
 8000402:	430a      	orrs	r2, r1
 8000404:	629a      	str	r2, [r3, #40]	; 0x28
	for(int pinOffest = 0; pinOffest < NUM_OF_LEDS; ++pinOffest)
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	3301      	adds	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
 800040c:	2204      	movs	r2, #4
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	4293      	cmp	r3, r2
 8000412:	dbf0      	blt.n	80003f6 <resetLEDs+0x12>

	*setIdx = 0;
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
	*resetIdx = numOfLEDsToLight - 1;
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	1e5a      	subs	r2, r3, #1
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	601a      	str	r2, [r3, #0]
}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b006      	add	sp, #24
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	48000800 	.word	0x48000800

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b590      	push	{r4, r7, lr}
 8000432:	b091      	sub	sp, #68	; 0x44
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	2410      	movs	r4, #16
 8000438:	193b      	adds	r3, r7, r4
 800043a:	0018      	movs	r0, r3
 800043c:	2330      	movs	r3, #48	; 0x30
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f000 fe51 	bl	80010e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000446:	003b      	movs	r3, r7
 8000448:	0018      	movs	r0, r3
 800044a:	2310      	movs	r3, #16
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	f000 fe4a 	bl	80010e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000454:	0021      	movs	r1, r4
 8000456:	187b      	adds	r3, r7, r1
 8000458:	2202      	movs	r2, #2
 800045a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2201      	movs	r2, #1
 8000460:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2210      	movs	r2, #16
 8000466:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2200      	movs	r2, #0
 800046c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046e:	187b      	adds	r3, r7, r1
 8000470:	0018      	movs	r0, r3
 8000472:	f000 f9c9 	bl	8000808 <HAL_RCC_OscConfig>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800047a:	f000 f819 	bl	80004b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	003b      	movs	r3, r7
 8000480:	2207      	movs	r2, #7
 8000482:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000484:	003b      	movs	r3, r7
 8000486:	2200      	movs	r2, #0
 8000488:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048a:	003b      	movs	r3, r7
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000490:	003b      	movs	r3, r7
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000496:	003b      	movs	r3, r7
 8000498:	2100      	movs	r1, #0
 800049a:	0018      	movs	r0, r3
 800049c:	f000 fcce 	bl	8000e3c <HAL_RCC_ClockConfig>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80004a4:	f000 f804 	bl	80004b0 <Error_Handler>
  }
}
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b011      	add	sp, #68	; 0x44
 80004ae:	bd90      	pop	{r4, r7, pc}

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <Error_Handler+0x8>
	...

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <HAL_MspInit+0x44>)
 80004c4:	699a      	ldr	r2, [r3, #24]
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_MspInit+0x44>)
 80004c8:	2101      	movs	r1, #1
 80004ca:	430a      	orrs	r2, r1
 80004cc:	619a      	str	r2, [r3, #24]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <HAL_MspInit+0x44>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	2201      	movs	r2, #1
 80004d4:	4013      	ands	r3, r2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <HAL_MspInit+0x44>)
 80004dc:	69da      	ldr	r2, [r3, #28]
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_MspInit+0x44>)
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	0549      	lsls	r1, r1, #21
 80004e4:	430a      	orrs	r2, r1
 80004e6:	61da      	str	r2, [r3, #28]
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_MspInit+0x44>)
 80004ea:	69da      	ldr	r2, [r3, #28]
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	055b      	lsls	r3, r3, #21
 80004f0:	4013      	ands	r3, r2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	40021000 	.word	0x40021000

08000504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <NMI_Handler+0x4>

0800050a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <HardFault_Handler+0x4>

08000510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000528:	f000 f87a 	bl	8000620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800053c:	480d      	ldr	r0, [pc, #52]	; (8000574 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800053e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <LoopForever+0x6>)
  ldr r1, =_edata
 8000542:	490e      	ldr	r1, [pc, #56]	; (800057c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000544:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <LoopForever+0xe>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000558:	4c0b      	ldr	r4, [pc, #44]	; (8000588 <LoopForever+0x16>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000566:	f7ff ffe4 	bl	8000532 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800056a:	f000 fd99 	bl	80010a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056e:	f7ff fe57 	bl	8000220 <main>

08000572 <LoopForever>:

LoopForever:
    b LoopForever
 8000572:	e7fe      	b.n	8000572 <LoopForever>
  ldr   r0, =_estack
 8000574:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800057c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000580:	08001148 	.word	0x08001148
  ldr r2, =_sbss
 8000584:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000588:	2000002c 	.word	0x2000002c

0800058c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800058c:	e7fe      	b.n	800058c <ADC1_IRQHandler>
	...

08000590 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <HAL_Init+0x24>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_Init+0x24>)
 800059a:	2110      	movs	r1, #16
 800059c:	430a      	orrs	r2, r1
 800059e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005a0:	2003      	movs	r0, #3
 80005a2:	f000 f809 	bl	80005b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a6:	f7ff ff89 	bl	80004bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005aa:	2300      	movs	r3, #0
}
 80005ac:	0018      	movs	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	40022000 	.word	0x40022000

080005b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <HAL_InitTick+0x5c>)
 80005c2:	681c      	ldr	r4, [r3, #0]
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <HAL_InitTick+0x60>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	0019      	movs	r1, r3
 80005ca:	23fa      	movs	r3, #250	; 0xfa
 80005cc:	0098      	lsls	r0, r3, #2
 80005ce:	f7ff fd9b 	bl	8000108 <__udivsi3>
 80005d2:	0003      	movs	r3, r0
 80005d4:	0019      	movs	r1, r3
 80005d6:	0020      	movs	r0, r4
 80005d8:	f7ff fd96 	bl	8000108 <__udivsi3>
 80005dc:	0003      	movs	r3, r0
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 f905 	bl	80007ee <HAL_SYSTICK_Config>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80005e8:	2301      	movs	r3, #1
 80005ea:	e00f      	b.n	800060c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b03      	cmp	r3, #3
 80005f0:	d80b      	bhi.n	800060a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	2301      	movs	r3, #1
 80005f6:	425b      	negs	r3, r3
 80005f8:	2200      	movs	r2, #0
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f8e2 	bl	80007c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_InitTick+0x64>)
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000606:	2300      	movs	r3, #0
 8000608:	e000      	b.n	800060c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800060a:	2301      	movs	r3, #1
}
 800060c:	0018      	movs	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	b003      	add	sp, #12
 8000612:	bd90      	pop	{r4, r7, pc}
 8000614:	20000000 	.word	0x20000000
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004

08000620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_IncTick+0x1c>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	001a      	movs	r2, r3
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <HAL_IncTick+0x20>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	18d2      	adds	r2, r2, r3
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <HAL_IncTick+0x20>)
 8000632:	601a      	str	r2, [r3, #0]
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	20000008 	.word	0x20000008
 8000640:	20000028 	.word	0x20000028

08000644 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  return uwTick;
 8000648:	4b02      	ldr	r3, [pc, #8]	; (8000654 <HAL_GetTick+0x10>)
 800064a:	681b      	ldr	r3, [r3, #0]
}
 800064c:	0018      	movs	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	20000028 	.word	0x20000028

08000658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000660:	f7ff fff0 	bl	8000644 <HAL_GetTick>
 8000664:	0003      	movs	r3, r0
 8000666:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3301      	adds	r3, #1
 8000670:	d005      	beq.n	800067e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <HAL_Delay+0x44>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	001a      	movs	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	189b      	adds	r3, r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	f7ff ffe0 	bl	8000644 <HAL_GetTick>
 8000684:	0002      	movs	r2, r0
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	429a      	cmp	r2, r3
 800068e:	d8f7      	bhi.n	8000680 <HAL_Delay+0x28>
  {
  }
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b004      	add	sp, #16
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	20000008 	.word	0x20000008

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	0002      	movs	r2, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b7f      	cmp	r3, #127	; 0x7f
 80006b4:	d828      	bhi.n	8000708 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006b6:	4a2f      	ldr	r2, [pc, #188]	; (8000774 <__NVIC_SetPriority+0xd4>)
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	089b      	lsrs	r3, r3, #2
 80006c0:	33c0      	adds	r3, #192	; 0xc0
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	589b      	ldr	r3, [r3, r2]
 80006c6:	1dfa      	adds	r2, r7, #7
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	0011      	movs	r1, r2
 80006cc:	2203      	movs	r2, #3
 80006ce:	400a      	ands	r2, r1
 80006d0:	00d2      	lsls	r2, r2, #3
 80006d2:	21ff      	movs	r1, #255	; 0xff
 80006d4:	4091      	lsls	r1, r2
 80006d6:	000a      	movs	r2, r1
 80006d8:	43d2      	mvns	r2, r2
 80006da:	401a      	ands	r2, r3
 80006dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	019b      	lsls	r3, r3, #6
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	401a      	ands	r2, r3
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	0018      	movs	r0, r3
 80006ec:	2303      	movs	r3, #3
 80006ee:	4003      	ands	r3, r0
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f4:	481f      	ldr	r0, [pc, #124]	; (8000774 <__NVIC_SetPriority+0xd4>)
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	089b      	lsrs	r3, r3, #2
 80006fe:	430a      	orrs	r2, r1
 8000700:	33c0      	adds	r3, #192	; 0xc0
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000706:	e031      	b.n	800076c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <__NVIC_SetPriority+0xd8>)
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	0019      	movs	r1, r3
 8000710:	230f      	movs	r3, #15
 8000712:	400b      	ands	r3, r1
 8000714:	3b08      	subs	r3, #8
 8000716:	089b      	lsrs	r3, r3, #2
 8000718:	3306      	adds	r3, #6
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	18d3      	adds	r3, r2, r3
 800071e:	3304      	adds	r3, #4
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	1dfa      	adds	r2, r7, #7
 8000724:	7812      	ldrb	r2, [r2, #0]
 8000726:	0011      	movs	r1, r2
 8000728:	2203      	movs	r2, #3
 800072a:	400a      	ands	r2, r1
 800072c:	00d2      	lsls	r2, r2, #3
 800072e:	21ff      	movs	r1, #255	; 0xff
 8000730:	4091      	lsls	r1, r2
 8000732:	000a      	movs	r2, r1
 8000734:	43d2      	mvns	r2, r2
 8000736:	401a      	ands	r2, r3
 8000738:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	019b      	lsls	r3, r3, #6
 800073e:	22ff      	movs	r2, #255	; 0xff
 8000740:	401a      	ands	r2, r3
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	0018      	movs	r0, r3
 8000748:	2303      	movs	r3, #3
 800074a:	4003      	ands	r3, r0
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000750:	4809      	ldr	r0, [pc, #36]	; (8000778 <__NVIC_SetPriority+0xd8>)
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	001c      	movs	r4, r3
 8000758:	230f      	movs	r3, #15
 800075a:	4023      	ands	r3, r4
 800075c:	3b08      	subs	r3, #8
 800075e:	089b      	lsrs	r3, r3, #2
 8000760:	430a      	orrs	r2, r1
 8000762:	3306      	adds	r3, #6
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	18c3      	adds	r3, r0, r3
 8000768:	3304      	adds	r3, #4
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b003      	add	sp, #12
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	1e5a      	subs	r2, r3, #1
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	045b      	lsls	r3, r3, #17
 800078c:	429a      	cmp	r2, r3
 800078e:	d301      	bcc.n	8000794 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000790:	2301      	movs	r3, #1
 8000792:	e010      	b.n	80007b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <SysTick_Config+0x44>)
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	3a01      	subs	r2, #1
 800079a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800079c:	2301      	movs	r3, #1
 800079e:	425b      	negs	r3, r3
 80007a0:	2103      	movs	r1, #3
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff ff7c 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <SysTick_Config+0x44>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ae:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <SysTick_Config+0x44>)
 80007b0:	2207      	movs	r2, #7
 80007b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	0018      	movs	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	e000e010 	.word	0xe000e010

080007c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	210f      	movs	r1, #15
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	1c02      	adds	r2, r0, #0
 80007d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff ff5d 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b004      	add	sp, #16
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff ffbf 	bl	800077c <SysTick_Config>
 80007fe:	0003      	movs	r3, r0
}
 8000800:	0018      	movs	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}

08000808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d101      	bne.n	800081a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e301      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2201      	movs	r2, #1
 8000820:	4013      	ands	r3, r2
 8000822:	d100      	bne.n	8000826 <HAL_RCC_OscConfig+0x1e>
 8000824:	e08d      	b.n	8000942 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000826:	4bc3      	ldr	r3, [pc, #780]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	220c      	movs	r2, #12
 800082c:	4013      	ands	r3, r2
 800082e:	2b04      	cmp	r3, #4
 8000830:	d00e      	beq.n	8000850 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000832:	4bc0      	ldr	r3, [pc, #768]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	220c      	movs	r2, #12
 8000838:	4013      	ands	r3, r2
 800083a:	2b08      	cmp	r3, #8
 800083c:	d116      	bne.n	800086c <HAL_RCC_OscConfig+0x64>
 800083e:	4bbd      	ldr	r3, [pc, #756]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000840:	685a      	ldr	r2, [r3, #4]
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	025b      	lsls	r3, r3, #9
 8000846:	401a      	ands	r2, r3
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	025b      	lsls	r3, r3, #9
 800084c:	429a      	cmp	r2, r3
 800084e:	d10d      	bne.n	800086c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000850:	4bb8      	ldr	r3, [pc, #736]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	029b      	lsls	r3, r3, #10
 8000858:	4013      	ands	r3, r2
 800085a:	d100      	bne.n	800085e <HAL_RCC_OscConfig+0x56>
 800085c:	e070      	b.n	8000940 <HAL_RCC_OscConfig+0x138>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d000      	beq.n	8000868 <HAL_RCC_OscConfig+0x60>
 8000866:	e06b      	b.n	8000940 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e2d8      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d107      	bne.n	8000884 <HAL_RCC_OscConfig+0x7c>
 8000874:	4baf      	ldr	r3, [pc, #700]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4bae      	ldr	r3, [pc, #696]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 800087a:	2180      	movs	r1, #128	; 0x80
 800087c:	0249      	lsls	r1, r1, #9
 800087e:	430a      	orrs	r2, r1
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	e02f      	b.n	80008e4 <HAL_RCC_OscConfig+0xdc>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d10c      	bne.n	80008a6 <HAL_RCC_OscConfig+0x9e>
 800088c:	4ba9      	ldr	r3, [pc, #676]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4ba8      	ldr	r3, [pc, #672]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000892:	49a9      	ldr	r1, [pc, #676]	; (8000b38 <HAL_RCC_OscConfig+0x330>)
 8000894:	400a      	ands	r2, r1
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	4ba6      	ldr	r3, [pc, #664]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4ba5      	ldr	r3, [pc, #660]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 800089e:	49a7      	ldr	r1, [pc, #668]	; (8000b3c <HAL_RCC_OscConfig+0x334>)
 80008a0:	400a      	ands	r2, r1
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	e01e      	b.n	80008e4 <HAL_RCC_OscConfig+0xdc>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	2b05      	cmp	r3, #5
 80008ac:	d10e      	bne.n	80008cc <HAL_RCC_OscConfig+0xc4>
 80008ae:	4ba1      	ldr	r3, [pc, #644]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	4ba0      	ldr	r3, [pc, #640]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	02c9      	lsls	r1, r1, #11
 80008b8:	430a      	orrs	r2, r1
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	4b9d      	ldr	r3, [pc, #628]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b9c      	ldr	r3, [pc, #624]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008c2:	2180      	movs	r1, #128	; 0x80
 80008c4:	0249      	lsls	r1, r1, #9
 80008c6:	430a      	orrs	r2, r1
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	e00b      	b.n	80008e4 <HAL_RCC_OscConfig+0xdc>
 80008cc:	4b99      	ldr	r3, [pc, #612]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b98      	ldr	r3, [pc, #608]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008d2:	4999      	ldr	r1, [pc, #612]	; (8000b38 <HAL_RCC_OscConfig+0x330>)
 80008d4:	400a      	ands	r2, r1
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	4b96      	ldr	r3, [pc, #600]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b95      	ldr	r3, [pc, #596]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80008de:	4997      	ldr	r1, [pc, #604]	; (8000b3c <HAL_RCC_OscConfig+0x334>)
 80008e0:	400a      	ands	r2, r1
 80008e2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d014      	beq.n	8000916 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ec:	f7ff feaa 	bl	8000644 <HAL_GetTick>
 80008f0:	0003      	movs	r3, r0
 80008f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f4:	e008      	b.n	8000908 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008f6:	f7ff fea5 	bl	8000644 <HAL_GetTick>
 80008fa:	0002      	movs	r2, r0
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	2b64      	cmp	r3, #100	; 0x64
 8000902:	d901      	bls.n	8000908 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000904:	2303      	movs	r3, #3
 8000906:	e28a      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000908:	4b8a      	ldr	r3, [pc, #552]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	029b      	lsls	r3, r3, #10
 8000910:	4013      	ands	r3, r2
 8000912:	d0f0      	beq.n	80008f6 <HAL_RCC_OscConfig+0xee>
 8000914:	e015      	b.n	8000942 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000916:	f7ff fe95 	bl	8000644 <HAL_GetTick>
 800091a:	0003      	movs	r3, r0
 800091c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800091e:	e008      	b.n	8000932 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000920:	f7ff fe90 	bl	8000644 <HAL_GetTick>
 8000924:	0002      	movs	r2, r0
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	2b64      	cmp	r3, #100	; 0x64
 800092c:	d901      	bls.n	8000932 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800092e:	2303      	movs	r3, #3
 8000930:	e275      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000932:	4b80      	ldr	r3, [pc, #512]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	029b      	lsls	r3, r3, #10
 800093a:	4013      	ands	r3, r2
 800093c:	d1f0      	bne.n	8000920 <HAL_RCC_OscConfig+0x118>
 800093e:	e000      	b.n	8000942 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000940:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2202      	movs	r2, #2
 8000948:	4013      	ands	r3, r2
 800094a:	d100      	bne.n	800094e <HAL_RCC_OscConfig+0x146>
 800094c:	e069      	b.n	8000a22 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800094e:	4b79      	ldr	r3, [pc, #484]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	220c      	movs	r2, #12
 8000954:	4013      	ands	r3, r2
 8000956:	d00b      	beq.n	8000970 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000958:	4b76      	ldr	r3, [pc, #472]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	220c      	movs	r2, #12
 800095e:	4013      	ands	r3, r2
 8000960:	2b08      	cmp	r3, #8
 8000962:	d11c      	bne.n	800099e <HAL_RCC_OscConfig+0x196>
 8000964:	4b73      	ldr	r3, [pc, #460]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	025b      	lsls	r3, r3, #9
 800096c:	4013      	ands	r3, r2
 800096e:	d116      	bne.n	800099e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000970:	4b70      	ldr	r3, [pc, #448]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2202      	movs	r2, #2
 8000976:	4013      	ands	r3, r2
 8000978:	d005      	beq.n	8000986 <HAL_RCC_OscConfig+0x17e>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d001      	beq.n	8000986 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e24b      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000986:	4b6b      	ldr	r3, [pc, #428]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	22f8      	movs	r2, #248	; 0xf8
 800098c:	4393      	bics	r3, r2
 800098e:	0019      	movs	r1, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	00da      	lsls	r2, r3, #3
 8000996:	4b67      	ldr	r3, [pc, #412]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000998:	430a      	orrs	r2, r1
 800099a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800099c:	e041      	b.n	8000a22 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d024      	beq.n	80009f0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009a6:	4b63      	ldr	r3, [pc, #396]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b62      	ldr	r3, [pc, #392]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80009ac:	2101      	movs	r1, #1
 80009ae:	430a      	orrs	r2, r1
 80009b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009b2:	f7ff fe47 	bl	8000644 <HAL_GetTick>
 80009b6:	0003      	movs	r3, r0
 80009b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ba:	e008      	b.n	80009ce <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009bc:	f7ff fe42 	bl	8000644 <HAL_GetTick>
 80009c0:	0002      	movs	r2, r0
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d901      	bls.n	80009ce <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80009ca:	2303      	movs	r3, #3
 80009cc:	e227      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ce:	4b59      	ldr	r3, [pc, #356]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2202      	movs	r2, #2
 80009d4:	4013      	ands	r3, r2
 80009d6:	d0f1      	beq.n	80009bc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009d8:	4b56      	ldr	r3, [pc, #344]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	22f8      	movs	r2, #248	; 0xf8
 80009de:	4393      	bics	r3, r2
 80009e0:	0019      	movs	r1, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	00da      	lsls	r2, r3, #3
 80009e8:	4b52      	ldr	r3, [pc, #328]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80009ea:	430a      	orrs	r2, r1
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	e018      	b.n	8000a22 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009f0:	4b50      	ldr	r3, [pc, #320]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b4f      	ldr	r3, [pc, #316]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 80009f6:	2101      	movs	r1, #1
 80009f8:	438a      	bics	r2, r1
 80009fa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009fc:	f7ff fe22 	bl	8000644 <HAL_GetTick>
 8000a00:	0003      	movs	r3, r0
 8000a02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a04:	e008      	b.n	8000a18 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a06:	f7ff fe1d 	bl	8000644 <HAL_GetTick>
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d901      	bls.n	8000a18 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000a14:	2303      	movs	r3, #3
 8000a16:	e202      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a18:	4b46      	ldr	r3, [pc, #280]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	4013      	ands	r3, r2
 8000a20:	d1f1      	bne.n	8000a06 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2208      	movs	r2, #8
 8000a28:	4013      	ands	r3, r2
 8000a2a:	d036      	beq.n	8000a9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d019      	beq.n	8000a68 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a34:	4b3f      	ldr	r3, [pc, #252]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a38:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a40:	f7ff fe00 	bl	8000644 <HAL_GetTick>
 8000a44:	0003      	movs	r3, r0
 8000a46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a48:	e008      	b.n	8000a5c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a4a:	f7ff fdfb 	bl	8000644 <HAL_GetTick>
 8000a4e:	0002      	movs	r2, r0
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d901      	bls.n	8000a5c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	e1e0      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a5c:	4b35      	ldr	r3, [pc, #212]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	2202      	movs	r2, #2
 8000a62:	4013      	ands	r3, r2
 8000a64:	d0f1      	beq.n	8000a4a <HAL_RCC_OscConfig+0x242>
 8000a66:	e018      	b.n	8000a9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a68:	4b32      	ldr	r3, [pc, #200]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a6c:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	438a      	bics	r2, r1
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a74:	f7ff fde6 	bl	8000644 <HAL_GetTick>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a7c:	e008      	b.n	8000a90 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a7e:	f7ff fde1 	bl	8000644 <HAL_GetTick>
 8000a82:	0002      	movs	r2, r0
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d901      	bls.n	8000a90 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	e1c6      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a90:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a94:	2202      	movs	r2, #2
 8000a96:	4013      	ands	r3, r2
 8000a98:	d1f1      	bne.n	8000a7e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	d100      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x29e>
 8000aa4:	e0b4      	b.n	8000c10 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000aa6:	201f      	movs	r0, #31
 8000aa8:	183b      	adds	r3, r7, r0
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000ab0:	69da      	ldr	r2, [r3, #28]
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	055b      	lsls	r3, r3, #21
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	d110      	bne.n	8000adc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000abc:	69da      	ldr	r2, [r3, #28]
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	0549      	lsls	r1, r1, #21
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	61da      	str	r2, [r3, #28]
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000aca:	69da      	ldr	r2, [r3, #28]
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	055b      	lsls	r3, r3, #21
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ad6:	183b      	adds	r3, r7, r0
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_RCC_OscConfig+0x338>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	d11a      	bne.n	8000b1e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_RCC_OscConfig+0x338>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_RCC_OscConfig+0x338>)
 8000aee:	2180      	movs	r1, #128	; 0x80
 8000af0:	0049      	lsls	r1, r1, #1
 8000af2:	430a      	orrs	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000af6:	f7ff fda5 	bl	8000644 <HAL_GetTick>
 8000afa:	0003      	movs	r3, r0
 8000afc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000afe:	e008      	b.n	8000b12 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b00:	f7ff fda0 	bl	8000644 <HAL_GetTick>
 8000b04:	0002      	movs	r2, r0
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	2b64      	cmp	r3, #100	; 0x64
 8000b0c:	d901      	bls.n	8000b12 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	e185      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_RCC_OscConfig+0x338>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	d0f0      	beq.n	8000b00 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d10e      	bne.n	8000b44 <HAL_RCC_OscConfig+0x33c>
 8000b26:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000b28:	6a1a      	ldr	r2, [r3, #32]
 8000b2a:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <HAL_RCC_OscConfig+0x32c>)
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	621a      	str	r2, [r3, #32]
 8000b32:	e035      	b.n	8000ba0 <HAL_RCC_OscConfig+0x398>
 8000b34:	40021000 	.word	0x40021000
 8000b38:	fffeffff 	.word	0xfffeffff
 8000b3c:	fffbffff 	.word	0xfffbffff
 8000b40:	40007000 	.word	0x40007000
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10c      	bne.n	8000b66 <HAL_RCC_OscConfig+0x35e>
 8000b4c:	4bb6      	ldr	r3, [pc, #728]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b4e:	6a1a      	ldr	r2, [r3, #32]
 8000b50:	4bb5      	ldr	r3, [pc, #724]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b52:	2101      	movs	r1, #1
 8000b54:	438a      	bics	r2, r1
 8000b56:	621a      	str	r2, [r3, #32]
 8000b58:	4bb3      	ldr	r3, [pc, #716]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b5a:	6a1a      	ldr	r2, [r3, #32]
 8000b5c:	4bb2      	ldr	r3, [pc, #712]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b5e:	2104      	movs	r1, #4
 8000b60:	438a      	bics	r2, r1
 8000b62:	621a      	str	r2, [r3, #32]
 8000b64:	e01c      	b.n	8000ba0 <HAL_RCC_OscConfig+0x398>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	2b05      	cmp	r3, #5
 8000b6c:	d10c      	bne.n	8000b88 <HAL_RCC_OscConfig+0x380>
 8000b6e:	4bae      	ldr	r3, [pc, #696]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b70:	6a1a      	ldr	r2, [r3, #32]
 8000b72:	4bad      	ldr	r3, [pc, #692]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b74:	2104      	movs	r1, #4
 8000b76:	430a      	orrs	r2, r1
 8000b78:	621a      	str	r2, [r3, #32]
 8000b7a:	4bab      	ldr	r3, [pc, #684]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b7c:	6a1a      	ldr	r2, [r3, #32]
 8000b7e:	4baa      	ldr	r3, [pc, #680]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	430a      	orrs	r2, r1
 8000b84:	621a      	str	r2, [r3, #32]
 8000b86:	e00b      	b.n	8000ba0 <HAL_RCC_OscConfig+0x398>
 8000b88:	4ba7      	ldr	r3, [pc, #668]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b8a:	6a1a      	ldr	r2, [r3, #32]
 8000b8c:	4ba6      	ldr	r3, [pc, #664]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b8e:	2101      	movs	r1, #1
 8000b90:	438a      	bics	r2, r1
 8000b92:	621a      	str	r2, [r3, #32]
 8000b94:	4ba4      	ldr	r3, [pc, #656]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b96:	6a1a      	ldr	r2, [r3, #32]
 8000b98:	4ba3      	ldr	r3, [pc, #652]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	438a      	bics	r2, r1
 8000b9e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d014      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ba8:	f7ff fd4c 	bl	8000644 <HAL_GetTick>
 8000bac:	0003      	movs	r3, r0
 8000bae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bb0:	e009      	b.n	8000bc6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bb2:	f7ff fd47 	bl	8000644 <HAL_GetTick>
 8000bb6:	0002      	movs	r2, r0
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	4a9b      	ldr	r2, [pc, #620]	; (8000e2c <HAL_RCC_OscConfig+0x624>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d901      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e12b      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bc6:	4b98      	ldr	r3, [pc, #608]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	2202      	movs	r2, #2
 8000bcc:	4013      	ands	r3, r2
 8000bce:	d0f0      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x3aa>
 8000bd0:	e013      	b.n	8000bfa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bd2:	f7ff fd37 	bl	8000644 <HAL_GetTick>
 8000bd6:	0003      	movs	r3, r0
 8000bd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bda:	e009      	b.n	8000bf0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bdc:	f7ff fd32 	bl	8000644 <HAL_GetTick>
 8000be0:	0002      	movs	r2, r0
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	4a91      	ldr	r2, [pc, #580]	; (8000e2c <HAL_RCC_OscConfig+0x624>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d901      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000bec:	2303      	movs	r3, #3
 8000bee:	e116      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bf0:	4b8d      	ldr	r3, [pc, #564]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000bf2:	6a1b      	ldr	r3, [r3, #32]
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	d1f0      	bne.n	8000bdc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000bfa:	231f      	movs	r3, #31
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d105      	bne.n	8000c10 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c04:	4b88      	ldr	r3, [pc, #544]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c06:	69da      	ldr	r2, [r3, #28]
 8000c08:	4b87      	ldr	r3, [pc, #540]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c0a:	4989      	ldr	r1, [pc, #548]	; (8000e30 <HAL_RCC_OscConfig+0x628>)
 8000c0c:	400a      	ands	r2, r1
 8000c0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2210      	movs	r2, #16
 8000c16:	4013      	ands	r3, r2
 8000c18:	d063      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d12a      	bne.n	8000c78 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c22:	4b81      	ldr	r3, [pc, #516]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c26:	4b80      	ldr	r3, [pc, #512]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c28:	2104      	movs	r1, #4
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000c2e:	4b7e      	ldr	r3, [pc, #504]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c32:	4b7d      	ldr	r3, [pc, #500]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c34:	2101      	movs	r1, #1
 8000c36:	430a      	orrs	r2, r1
 8000c38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c3a:	f7ff fd03 	bl	8000644 <HAL_GetTick>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c44:	f7ff fcfe 	bl	8000644 <HAL_GetTick>
 8000c48:	0002      	movs	r2, r0
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e0e3      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c56:	4b74      	ldr	r3, [pc, #464]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	d0f1      	beq.n	8000c44 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c60:	4b71      	ldr	r3, [pc, #452]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c64:	22f8      	movs	r2, #248	; 0xf8
 8000c66:	4393      	bics	r3, r2
 8000c68:	0019      	movs	r1, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	00da      	lsls	r2, r3, #3
 8000c70:	4b6d      	ldr	r3, [pc, #436]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c72:	430a      	orrs	r2, r1
 8000c74:	635a      	str	r2, [r3, #52]	; 0x34
 8000c76:	e034      	b.n	8000ce2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	3305      	adds	r3, #5
 8000c7e:	d111      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c80:	4b69      	ldr	r3, [pc, #420]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c84:	4b68      	ldr	r3, [pc, #416]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c86:	2104      	movs	r1, #4
 8000c88:	438a      	bics	r2, r1
 8000c8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c8c:	4b66      	ldr	r3, [pc, #408]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c90:	22f8      	movs	r2, #248	; 0xf8
 8000c92:	4393      	bics	r3, r2
 8000c94:	0019      	movs	r1, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	00da      	lsls	r2, r3, #3
 8000c9c:	4b62      	ldr	r3, [pc, #392]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ca2:	e01e      	b.n	8000ce2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ca4:	4b60      	ldr	r3, [pc, #384]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ca8:	4b5f      	ldr	r3, [pc, #380]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000caa:	2104      	movs	r1, #4
 8000cac:	430a      	orrs	r2, r1
 8000cae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000cb0:	4b5d      	ldr	r3, [pc, #372]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cb4:	4b5c      	ldr	r3, [pc, #368]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	438a      	bics	r2, r1
 8000cba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cbc:	f7ff fcc2 	bl	8000644 <HAL_GetTick>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cc4:	e008      	b.n	8000cd8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cc6:	f7ff fcbd 	bl	8000644 <HAL_GetTick>
 8000cca:	0002      	movs	r2, r0
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d901      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e0a2      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cd8:	4b53      	ldr	r3, [pc, #332]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cdc:	2202      	movs	r2, #2
 8000cde:	4013      	ands	r3, r2
 8000ce0:	d1f1      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d100      	bne.n	8000cec <HAL_RCC_OscConfig+0x4e4>
 8000cea:	e097      	b.n	8000e1c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cec:	4b4e      	ldr	r3, [pc, #312]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	220c      	movs	r2, #12
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d100      	bne.n	8000cfa <HAL_RCC_OscConfig+0x4f2>
 8000cf8:	e06b      	b.n	8000dd2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a1b      	ldr	r3, [r3, #32]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d14c      	bne.n	8000d9c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d02:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4b48      	ldr	r3, [pc, #288]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d08:	494a      	ldr	r1, [pc, #296]	; (8000e34 <HAL_RCC_OscConfig+0x62c>)
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fc99 	bl	8000644 <HAL_GetTick>
 8000d12:	0003      	movs	r3, r0
 8000d14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d18:	f7ff fc94 	bl	8000644 <HAL_GetTick>
 8000d1c:	0002      	movs	r2, r0
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e079      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d2a:	4b3f      	ldr	r3, [pc, #252]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	049b      	lsls	r3, r3, #18
 8000d32:	4013      	ands	r3, r2
 8000d34:	d1f0      	bne.n	8000d18 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d36:	4b3c      	ldr	r3, [pc, #240]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	4393      	bics	r3, r2
 8000d3e:	0019      	movs	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d44:	4b38      	ldr	r3, [pc, #224]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d46:	430a      	orrs	r2, r1
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d4a:	4b37      	ldr	r3, [pc, #220]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	4a3a      	ldr	r2, [pc, #232]	; (8000e38 <HAL_RCC_OscConfig+0x630>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	0019      	movs	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d60:	430a      	orrs	r2, r1
 8000d62:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d64:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d6a:	2180      	movs	r1, #128	; 0x80
 8000d6c:	0449      	lsls	r1, r1, #17
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d72:	f7ff fc67 	bl	8000644 <HAL_GetTick>
 8000d76:	0003      	movs	r3, r0
 8000d78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d7c:	f7ff fc62 	bl	8000644 <HAL_GetTick>
 8000d80:	0002      	movs	r2, r0
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e047      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	049b      	lsls	r3, r3, #18
 8000d96:	4013      	ands	r3, r2
 8000d98:	d0f0      	beq.n	8000d7c <HAL_RCC_OscConfig+0x574>
 8000d9a:	e03f      	b.n	8000e1c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000da2:	4924      	ldr	r1, [pc, #144]	; (8000e34 <HAL_RCC_OscConfig+0x62c>)
 8000da4:	400a      	ands	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da8:	f7ff fc4c 	bl	8000644 <HAL_GetTick>
 8000dac:	0003      	movs	r3, r0
 8000dae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000db0:	e008      	b.n	8000dc4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000db2:	f7ff fc47 	bl	8000644 <HAL_GetTick>
 8000db6:	0002      	movs	r2, r0
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d901      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e02c      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	049b      	lsls	r3, r3, #18
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d1f0      	bne.n	8000db2 <HAL_RCC_OscConfig+0x5aa>
 8000dd0:	e024      	b.n	8000e1c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a1b      	ldr	r3, [r3, #32]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d101      	bne.n	8000dde <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e01f      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <HAL_RCC_OscConfig+0x620>)
 8000de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	025b      	lsls	r3, r3, #9
 8000df0:	401a      	ands	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d10e      	bne.n	8000e18 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	401a      	ands	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d107      	bne.n	8000e18 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	23f0      	movs	r3, #240	; 0xf0
 8000e0c:	039b      	lsls	r3, r3, #14
 8000e0e:	401a      	ands	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d001      	beq.n	8000e1c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b008      	add	sp, #32
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	00001388 	.word	0x00001388
 8000e30:	efffffff 	.word	0xefffffff
 8000e34:	feffffff 	.word	0xfeffffff
 8000e38:	ffc2ffff 	.word	0xffc2ffff

08000e3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e0b3      	b.n	8000fb8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e50:	4b5b      	ldr	r3, [pc, #364]	; (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2201      	movs	r2, #1
 8000e56:	4013      	ands	r3, r2
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d911      	bls.n	8000e82 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e5e:	4b58      	ldr	r3, [pc, #352]	; (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2201      	movs	r2, #1
 8000e64:	4393      	bics	r3, r2
 8000e66:	0019      	movs	r1, r3
 8000e68:	4b55      	ldr	r3, [pc, #340]	; (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e70:	4b53      	ldr	r3, [pc, #332]	; (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2201      	movs	r2, #1
 8000e76:	4013      	ands	r3, r2
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d001      	beq.n	8000e82 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e09a      	b.n	8000fb8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2202      	movs	r2, #2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d015      	beq.n	8000eb8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2204      	movs	r2, #4
 8000e92:	4013      	ands	r3, r2
 8000e94:	d006      	beq.n	8000ea4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000e96:	4b4b      	ldr	r3, [pc, #300]	; (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	4b4a      	ldr	r3, [pc, #296]	; (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000e9c:	21e0      	movs	r1, #224	; 0xe0
 8000e9e:	00c9      	lsls	r1, r1, #3
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ea4:	4b47      	ldr	r3, [pc, #284]	; (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	22f0      	movs	r2, #240	; 0xf0
 8000eaa:	4393      	bics	r3, r2
 8000eac:	0019      	movs	r1, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	4b44      	ldr	r3, [pc, #272]	; (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d040      	beq.n	8000f44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d107      	bne.n	8000eda <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eca:	4b3e      	ldr	r3, [pc, #248]	; (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	029b      	lsls	r3, r3, #10
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d114      	bne.n	8000f00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e06e      	b.n	8000fb8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d107      	bne.n	8000ef2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ee2:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	049b      	lsls	r3, r3, #18
 8000eea:	4013      	ands	r3, r2
 8000eec:	d108      	bne.n	8000f00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e062      	b.n	8000fb8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef2:	4b34      	ldr	r3, [pc, #208]	; (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d101      	bne.n	8000f00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e05b      	b.n	8000fb8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f00:	4b30      	ldr	r3, [pc, #192]	; (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2203      	movs	r2, #3
 8000f06:	4393      	bics	r3, r2
 8000f08:	0019      	movs	r1, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000f10:	430a      	orrs	r2, r1
 8000f12:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f14:	f7ff fb96 	bl	8000644 <HAL_GetTick>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f1c:	e009      	b.n	8000f32 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f1e:	f7ff fb91 	bl	8000644 <HAL_GetTick>
 8000f22:	0002      	movs	r2, r0
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <HAL_RCC_ClockConfig+0x18c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e042      	b.n	8000fb8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f32:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	220c      	movs	r2, #12
 8000f38:	401a      	ands	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d1ec      	bne.n	8000f1e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d211      	bcs.n	8000f76 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2201      	movs	r2, #1
 8000f58:	4393      	bics	r3, r2
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_RCC_ClockConfig+0x184>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d001      	beq.n	8000f76 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e020      	b.n	8000fb8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d009      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <HAL_RCC_ClockConfig+0x190>)
 8000f86:	4013      	ands	r3, r2
 8000f88:	0019      	movs	r1, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000f90:	430a      	orrs	r2, r1
 8000f92:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f94:	f000 f820 	bl	8000fd8 <HAL_RCC_GetSysClockFreq>
 8000f98:	0001      	movs	r1, r0
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_RCC_ClockConfig+0x188>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	091b      	lsrs	r3, r3, #4
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_RCC_ClockConfig+0x194>)
 8000fa6:	5cd3      	ldrb	r3, [r2, r3]
 8000fa8:	000a      	movs	r2, r1
 8000faa:	40da      	lsrs	r2, r3
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_RCC_ClockConfig+0x198>)
 8000fae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f7ff fb01 	bl	80005b8 <HAL_InitTick>
  
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b004      	add	sp, #16
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40022000 	.word	0x40022000
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	00001388 	.word	0x00001388
 8000fcc:	fffff8ff 	.word	0xfffff8ff
 8000fd0:	08001130 	.word	0x08001130
 8000fd4:	20000000 	.word	0x20000000

08000fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b08f      	sub	sp, #60	; 0x3c
 8000fdc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000fde:	2314      	movs	r3, #20
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	4a2b      	ldr	r2, [pc, #172]	; (8001090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fe4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fe6:	c313      	stmia	r3!, {r0, r1, r4}
 8000fe8:	6812      	ldr	r2, [r2, #0]
 8000fea:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4a29      	ldr	r2, [pc, #164]	; (8001094 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ff0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ff2:	c313      	stmia	r3!, {r0, r1, r4}
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001000:	2300      	movs	r3, #0
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001008:	2300      	movs	r3, #0
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800100c:	4b22      	ldr	r3, [pc, #136]	; (8001098 <HAL_RCC_GetSysClockFreq+0xc0>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001014:	220c      	movs	r2, #12
 8001016:	4013      	ands	r3, r2
 8001018:	2b04      	cmp	r3, #4
 800101a:	d002      	beq.n	8001022 <HAL_RCC_GetSysClockFreq+0x4a>
 800101c:	2b08      	cmp	r3, #8
 800101e:	d003      	beq.n	8001028 <HAL_RCC_GetSysClockFreq+0x50>
 8001020:	e02d      	b.n	800107e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001026:	e02d      	b.n	8001084 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102a:	0c9b      	lsrs	r3, r3, #18
 800102c:	220f      	movs	r2, #15
 800102e:	4013      	ands	r3, r2
 8001030:	2214      	movs	r2, #20
 8001032:	18ba      	adds	r2, r7, r2
 8001034:	5cd3      	ldrb	r3, [r2, r3]
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_RCC_GetSysClockFreq+0xc0>)
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	220f      	movs	r2, #15
 800103e:	4013      	ands	r3, r2
 8001040:	1d3a      	adds	r2, r7, #4
 8001042:	5cd3      	ldrb	r3, [r2, r3]
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	025b      	lsls	r3, r3, #9
 800104c:	4013      	ands	r3, r2
 800104e:	d009      	beq.n	8001064 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001052:	4812      	ldr	r0, [pc, #72]	; (800109c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001054:	f7ff f858 	bl	8000108 <__udivsi3>
 8001058:	0003      	movs	r3, r0
 800105a:	001a      	movs	r2, r3
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	4353      	muls	r3, r2
 8001060:	637b      	str	r3, [r7, #52]	; 0x34
 8001062:	e009      	b.n	8001078 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001066:	000a      	movs	r2, r1
 8001068:	0152      	lsls	r2, r2, #5
 800106a:	1a52      	subs	r2, r2, r1
 800106c:	0193      	lsls	r3, r2, #6
 800106e:	1a9b      	subs	r3, r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	185b      	adds	r3, r3, r1
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800107c:	e002      	b.n	8001084 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001082:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001086:	0018      	movs	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	b00f      	add	sp, #60	; 0x3c
 800108c:	bd90      	pop	{r4, r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	08001110 	.word	0x08001110
 8001094:	08001120 	.word	0x08001120
 8001098:	40021000 	.word	0x40021000
 800109c:	007a1200 	.word	0x007a1200

080010a0 <__libc_init_array>:
 80010a0:	b570      	push	{r4, r5, r6, lr}
 80010a2:	2600      	movs	r6, #0
 80010a4:	4d0c      	ldr	r5, [pc, #48]	; (80010d8 <__libc_init_array+0x38>)
 80010a6:	4c0d      	ldr	r4, [pc, #52]	; (80010dc <__libc_init_array+0x3c>)
 80010a8:	1b64      	subs	r4, r4, r5
 80010aa:	10a4      	asrs	r4, r4, #2
 80010ac:	42a6      	cmp	r6, r4
 80010ae:	d109      	bne.n	80010c4 <__libc_init_array+0x24>
 80010b0:	2600      	movs	r6, #0
 80010b2:	f000 f821 	bl	80010f8 <_init>
 80010b6:	4d0a      	ldr	r5, [pc, #40]	; (80010e0 <__libc_init_array+0x40>)
 80010b8:	4c0a      	ldr	r4, [pc, #40]	; (80010e4 <__libc_init_array+0x44>)
 80010ba:	1b64      	subs	r4, r4, r5
 80010bc:	10a4      	asrs	r4, r4, #2
 80010be:	42a6      	cmp	r6, r4
 80010c0:	d105      	bne.n	80010ce <__libc_init_array+0x2e>
 80010c2:	bd70      	pop	{r4, r5, r6, pc}
 80010c4:	00b3      	lsls	r3, r6, #2
 80010c6:	58eb      	ldr	r3, [r5, r3]
 80010c8:	4798      	blx	r3
 80010ca:	3601      	adds	r6, #1
 80010cc:	e7ee      	b.n	80010ac <__libc_init_array+0xc>
 80010ce:	00b3      	lsls	r3, r6, #2
 80010d0:	58eb      	ldr	r3, [r5, r3]
 80010d2:	4798      	blx	r3
 80010d4:	3601      	adds	r6, #1
 80010d6:	e7f2      	b.n	80010be <__libc_init_array+0x1e>
 80010d8:	08001140 	.word	0x08001140
 80010dc:	08001140 	.word	0x08001140
 80010e0:	08001140 	.word	0x08001140
 80010e4:	08001144 	.word	0x08001144

080010e8 <memset>:
 80010e8:	0003      	movs	r3, r0
 80010ea:	1882      	adds	r2, r0, r2
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d100      	bne.n	80010f2 <memset+0xa>
 80010f0:	4770      	bx	lr
 80010f2:	7019      	strb	r1, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	e7f9      	b.n	80010ec <memset+0x4>

080010f8 <_init>:
 80010f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010fe:	bc08      	pop	{r3}
 8001100:	469e      	mov	lr, r3
 8001102:	4770      	bx	lr

08001104 <_fini>:
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800110a:	bc08      	pop	{r3}
 800110c:	469e      	mov	lr, r3
 800110e:	4770      	bx	lr
